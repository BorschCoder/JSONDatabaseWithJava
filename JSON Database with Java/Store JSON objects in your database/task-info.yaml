type: edu
files:
  - name: src/client/Main.java
    visible: true
    text: |
      package client;
      
      public class Main {
      
          public static void main(String[] args) {
              System.out.println("Hello, world!");
          }
      }
    learner_created: false
  - name: src/server/Main.java
    visible: true
    text: |
      package server;
      
      public class Main {
      
          public static void main(String[] args) {
              System.out.println("Hello, world!");
          }
      }
    learner_created: false
  - name: test/JsonDatabaseTest.java
    visible: false
    text: "import com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport org.hyperskill.hstest.dynamic.DynamicTest;\n\
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;\nimport org.hyperskill.hstest.stage.StageTest;\n\
    import org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testing.TestedProgram;\n\
    import org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.File;\n\
    import java.io.IOException;\nimport java.lang.management.ManagementFactory;\n\
    import java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport\
    \ java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.List;\n\
    \nimport static org.hyperskill.hstest.testing.expect.Expectation.expect;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;\n\npublic\
    \ class JsonDatabaseTest extends StageTest<String> {\n\n    private static final\
    \ String OK_STATUS = \"OK\";\n    private static final String ERROR_STATUS = \"\
    ERROR\";\n    private static final String NO_SUCH_KEY_REASON = \"No such key\"\
    ;\n\n    private static final String WRONG_EXIT = \"The server should stop when\
    \ client sends 'exit' request\";\n\n    private static final String fileName =\
    \ \"data.json\";\n    private static final String serverFolderPath = System.getProperty(\"\
    user.dir\") + File.separator +\n        \"src\" + File.separator +\n        \"\
    server\" + File.separator +\n        \"data\";\n    private static final String\
    \ serverJsonFileName = serverFolderPath + File.separator + fileName;\n\n    private\
    \ static final String clientFolderPath = System.getProperty(\"user.dir\") + File.separator\
    \ +\n        \"src\" + File.separator +\n        \"client\" + File.separator +\n\
    \        \"data\";\n\n    private static final Gson gson = new Gson();\n\n   \
    \ private static final String setFileContent = JsonBuilder.newBuilder()\n    \
    \    .addValue(\"type\", \"set\")\n        .addValue(\"key\", \"person\")\n  \
    \      .addJsonObject(\"value\", JsonBuilder.newBuilder()\n            .addValue(\"\
    name\", \"Elon Musk\")\n            .addJsonObject(\"car\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"model\", \"Tesla Roadster\")\n              \
    \      .addValue(\"year\", \"2018\")\n                    .getAsJsonObject()\n\
    \            )\n            .addJsonObject(\"rocket\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"name\", \"Falcon 9\")\n                    .addValue(\"\
    launches\", \"87\")\n                    .getAsJsonObject())\n            .getAsJsonObject())\n\
    \        .getAsString();\n\n    private static final String getFileContent = JsonBuilder.newBuilder()\n\
    \        .addValue(\"type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"\
    [person, name]\", JsonArray.class))\n        .getAsString();\n\n    private static\
    \ final String secondGetFileContent = JsonBuilder.newBuilder()\n        .addValue(\"\
    type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"[person]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String deleteFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"delete\")\n      \
    \  .addValue(\"key\", gson.fromJson(\"[person, car, year]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String updateFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"set\")\n        .addValue(\"\
    key\", gson.fromJson(\"[person, rocket, launches]\", JsonArray.class))\n     \
    \   .addValue(\"value\", \"88\")\n        .getAsString();\n\n    private static\
    \ int threadsCount;\n\n    @DynamicTest(order = 1)\n    CheckResult checkExit()\
    \ {\n\n        TestedProgram server = getServer();\n        server.startInBackground();\n\
    \n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException\
    \ e) {\n            e.printStackTrace();\n        }\n\n        TestedProgram client\
    \ = getClient();\n        client.start(\"-t\", \"exit\");\n\n        try {\n \
    \           Thread.sleep(100);\n        } catch (InterruptedException e) {\n \
    \           e.printStackTrace();\n        }\n\n        if (!server.isFinished())\
    \ {\n            server.stop();\n            return CheckResult.wrong(WRONG_EXIT);\n\
    \        }\n\n        return CheckResult.correct();\n    }\n\n    @DynamicTest(order\
    \ = 2)\n    CheckResult checkJsonFile() throws IOException {\n\n        if (!Files.exists(Paths.get(serverFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /server/data folder\");\n\
    \        }\n\n        if (!Files.exists(Paths.get(serverJsonFileName))) {\n  \
    \          return CheckResult.wrong(\"Can't find \" + fileName + \" file in the\
    \ /server/data folder\");\n        }\n\n        if (!Files.exists(Paths.get(clientFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /client/data folder\");\n\
    \        }\n\n        createJsonFiles();\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static void createJsonFiles() throws IOException {\n   \
    \     Files.write(Paths.get(clientFolderPath + File.separator + \"setFile.json\"\
    ),\n            List.of(setFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"getFile.json\"\
    ),\n            List.of(getFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"secondGetFile.json\"\
    ),\n            List.of(secondGetFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"deleteFile.json\"\
    ),\n            List.of(deleteFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"updateFile.json\"\
    ),\n            List.of(updateFileContent),\n            StandardCharsets.UTF_8);\n\
    \    }\n\n    @DynamicTest(order = 3)\n    CheckResult testInputs() throws InterruptedException\
    \ {\n        \n        threadsCount = getThreadCount();\n\n        TestedProgram\
    \ server = getServer();\n        server.startInBackground();\n\n        try {\n\
    \            Thread.sleep(100);\n        } catch (InterruptedException e) {\n\
    \            e.printStackTrace();\n        }\n\n        TestedProgram client;\n\
    \        String output;\n\n        String requestJson;\n        String responseJson;\n\
    \        \n        client = getClient();\n        output = client.start(\"-t\"\
    , \"set\", \"-k\", \"1\", \"-v\", \"Hello world!\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"type\", \"set\")\n                .value(\"key\", \"\
    1\")\n                .value(\"value\", \"Hello world!\")\n            );\n  \
    \      responseJson = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    response\", OK_STATUS)\n            );\n\n        // Files\n        client = getClient();\n\
    \        output = client.start(\"-in\", \"setFile.json\");\n        requestJson\
    \ = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n \
    \           .asJson()\n            .check(isObject()\n                .value(\"\
    key\", \"person\")\n                .value(\"value\", isObject()\n           \
    \         .value(\"name\", \"Elon Musk\")\n                    .value(\"car\"\
    , isObject()\n                        .value(\"model\", \"Tesla Roadster\")\n\
    \                        .anyOtherValues()\n                    )\n          \
    \          .anyOtherValues()\n                )\n                .anyOtherValues()\n\
    \            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"response\", OK_STATUS)\n            );\n\n        client\
    \ = getClient();\n        output = client.start(\"-in\", \"getFile.json\");\n\
    \        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\", \"name\"\
    ))\n            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", \"Elon Musk\")\n            );\n\n\n  \
    \      client = getClient();\n        output = client.start(\"-in\", \"updateFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"set\")\n                .value(\"key\", isArray(\"person\", \"rocket\"\
    , \"launches\"))\n                .value(\"value\", \"88\")\n            );\n\
    \        responseJson = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .anyOtherValues()\n                    )\n\
    \            );\n\n\n        client = getClient();\n        output = client.start(\"\
    -in\", \"deleteFile.json\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"type\", \"delete\")\n                .value(\"key\"\
    , isArray(\"person\", \"car\", \"year\"))\n            );\n        responseJson\
    \ = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .value(\"car\", isObject()\n             \
    \               .value(\"model\", \"Tesla Roadster\")\n                      \
    \  )\n                        .anyOtherValues()\n                    )\n     \
    \       );\n        checkIfThreadWasCreated();\n\n\n        client = getClient();\n\
    \        client.start(\"-t\", \"exit\");\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static TestedProgram getClient() {\n        return new TestedProgram(\"\
    client\");\n    }\n\n    private static TestedProgram getServer() {\n        return\
    \ new TestedProgram(\"server\");\n    }\n\n    private static int getThreadCount()\
    \ {\n        return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();\n\
    \    }\n\n    private static void checkIfThreadWasCreated() {\n\n        int total\
    \ = getThreadCount();\n\n        /*8 threads: 1 server thread and 7 client threads\
    \ created during the test.\n         If the server doesn't handle clients in a\
    \ new thread then the difference between number of threads\n         before and\
    \ after the test should be equal 8 */\n        if (total - threadsCount == 8)\
    \ {\n            throw new WrongAnswer(\"Looks like you don't process client connection\
    \ in another thread.\\n\" +\n                \"Every client request should be\
    \ parsed and handled in a separate thread!\\n\" +\n                (total - threadsCount));\n\
    \        }\n    }\n\n    @AfterClass\n    public static void deleteFiles() {\n\
    \        try {\n            Files.delete(Paths.get(clientFolderPath + File.separator\
    \ + \"setFile.json\"));\n            Files.delete(Paths.get(clientFolderPath +\
    \ File.separator + \"getFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"secondGetFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"deleteFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"updateFile.json\"));\n        } catch (IOException ignored)\
    \ {\n        }\n\n        String filePath = serverFolderPath + File.separator\
    \ + fileName;\n        String tempFilePath = serverFolderPath + File.separator\
    \ + \"temp.json\";\n\n        try {\n            Files.copy(Paths.get(tempFilePath),\
    \ Paths.get(filePath), StandardCopyOption.REPLACE_EXISTING);\n            Files.delete(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n    }\n\n    @BeforeClass\n\
    \    public static void copyFiles() {\n\n        String filePath = serverFolderPath\
    \ + File.separator + fileName;\n        String tempFilePath = serverFolderPath\
    \ + File.separator + \"temp.json\";\n\n        try {\n            Files.createFile(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.copy(Paths.get(filePath), Paths.get(tempFilePath), StandardCopyOption.REPLACE_EXISTING);\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.write(Paths.get(filePath), \"{}\".getBytes());\n        } catch (IOException\
    \ ignored) {\n        }\n    }\n}\n"
    learner_created: false
  - name: test/JsonFinder.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class JsonFinder {
      
          private static final Pattern pattern = Pattern.compile("\\{.+}");
      
          public static String findRequestJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("type")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                  "It should contain 'type' key");
          }
      
          public static String findResponseJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("response")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                  "It should contain 'response' key");
          }
      }
    learner_created: false
  - name: test/JsonRequestBuilder.java
    visible: false
    text: |-
      import com.google.gson.Gson;
      import com.google.gson.JsonElement;
      import com.google.gson.JsonObject;
      
      class JsonBuilder {
      
          private final Gson gson = new Gson();
          private final JsonObject jsonObject = new JsonObject();
      
          private JsonBuilder() {
      
          }
      
          public static JsonBuilder newBuilder() {
              return new JsonBuilder();
          }
      
          public JsonBuilder addValue(String key, String value) {
              jsonObject.addProperty(key, value);
              return this;
          }
      
          public JsonBuilder addValue(String key, JsonElement value) {
              jsonObject.add(key, value);
              return this;
          }
      
          public JsonBuilder addJsonObject(String key, JsonObject object) {
              jsonObject.add(key, object);
              return this;
          }
      
          public String getAsString() {
              return jsonObject.toString();
          }
      
          public JsonObject getAsJsonObject() {
              return jsonObject;
          }
      }
    learner_created: false
  - name: src/server/ResponseType.java
    visible: true
    text: |
      package server;
      
      public enum ResponseType {
          OK,ERROR;
      }
    learner_created: true
  - name: src/client/data/testGet.json
    visible: true
    text: "{\"type\":\"get\",\"key\":\"name\"}"
    learner_created: true
  - name: src/server/EntityController.java
    visible: true
    text: |
      package server;
      
      import client.Request;
      
      import static server.ResponseType.OK;
      
      public class EntityController {
      
          private EntityService service;
      
          public EntityController() {
              this.service = new EntityService();
          }
      
          public Response handle(Request request) {
      
              String method = request.getType();
              String key = request.getKey();
              String value = request.getValue();
      
              Response response = new Response();
              switch (method) {
                  case "set" -> {
                      service.set(key, value, response);
                      response.setResponse(OK);
                  }
                  case "get" -> {
                      service.get(key, response);
                  }
                  case "delete" -> {
                      service.delete(key, response);
                  }
                  default -> {
                      response.setResponse(OK);
                  }
              }
      
              return response;
          }
      }
    learner_created: true
  - name: src/server/Test.java
    visible: true
    text: |
      package server;
      
      import com.google.gson.Gson;
      
      public class Test {
      
          private static Gson gson = new Gson().newBuilder().setPrettyPrinting().create();
      
          /*public static void main(String[] args) {
              String fileName = "/Users/mihail/IdeaProjects/JSON Database with Java/JSON Database with Java/task/src/server/data/db.json";
      
              Entity testEntity1 = new Entity("qwe", "rty");
              Entity testEntity2 = new Entity("asd", "fgh");
              List<Entity> entities = List.of(testEntity1, testEntity2);
              List<Entity> listEntities;
              //Entity[] arrayEntities;
              try (BufferedReader reader = Files.newBufferedReader(Paths.get(fileName))) {
      
                  StringBuilder jsonContent = new StringBuilder();
                  String line;
      
                  while ((line = reader.readLine()) != null) {
                      jsonContent.append(line);
                  }
      
      
                  listEntities = gson.fromJson(jsonContent.toString(), new TypeToken<List<Entity>>(){}.getType());
      
                  System.out.println(listEntities);
      
              } catch (IOException e) {
                  e.printStackTrace();
              }
              //save(entities, fileName);
          }
      
          private static void save(List<Entity> entities, String fileName) {
              try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(fileName))) {
      
                  StringBuilder jsonString = new StringBuilder();
                  jsonString.append("[\n\n");
                  for (Entity item : entities) {
                      jsonString.append(gson.toJson(item, Entity.class)).append(",\n");
                  }
                  jsonString.deleteCharAt(jsonString.length() - 2);
                  jsonString.append("\n]");
                  writer.write(jsonString.toString());
      
              } catch (IOException e) {
                  e.printStackTrace();
              }
          }*/
      
      }
    learner_created: true
  - name: src/server/Server.java
    visible: true
    text: |+
      package server;
      
      import client.Request;
      import com.google.gson.Gson;
      
      import java.io.DataInputStream;
      import java.io.DataOutputStream;
      import java.io.IOException;
      import java.lang.reflect.Type;
      import java.net.ServerSocket;
      import java.net.Socket;
      import java.util.concurrent.Executors;
      import java.util.concurrent.ExecutorService;
      
      import static server.ResponseType.OK;
      
      public class Server {
          private final ExecutorService executor;
          private final EntityService entityService;
          private ServerSocket server;
          private final int port;
      
          private EntityController controller;
      
          public Server(int port) {
              this.entityService = new EntityService();
              this.port = port;
              this.executor = Executors.newCachedThreadPool();
              this.controller = new EntityController();
      
          }
      
          public void run() {
              try {
                  server = new ServerSocket(port);
                  while (!server.isClosed()) {
                      Socket socket = server.accept();
      
                      executor.submit(() -> {
      
                          try (DataInputStream input = new DataInputStream(socket.getInputStream());
                               DataOutputStream output = new DataOutputStream(socket.getOutputStream())) {
      
                              String receivedMessage = input.readUTF();
                              Request request = new Gson().fromJson(receivedMessage, (Type) Request.class);
      
                              String method = request.getType();
                              Response response = null;
      
                              if (method.equals("exit")) {
                                  response = close();
                              } else {
                                  response = controller.handle(request);
                              }
      
                              String textResponse = new Gson().toJson(response).toString();
                              output.writeUTF(textResponse);
      
                          } catch (IOException e) {
                              e.printStackTrace();
                          }
                      });
      
                  }
      
      
              } catch (IOException e) {
                  e.printStackTrace();
              }
          }
      
          public Response close() {
              this.executor.shutdown();
              try {
                  server.close();
              } catch (IOException e) {
                  e.printStackTrace();
              }
              return new Response(OK);
          }
      
      }
    
    
    learner_created: true
  - name: src/client/Request.java
    visible: true
    text: |
      package client;
      
      public class Request {
          private final String type;
          private final String key;
          private final String value;
      
          public Request(RequestType type, String keyValue) {
              this(type, keyValue, null);
          }
      
          public Request(RequestType type, String keyValue, String setValue) {
              this.type = type.getType();
              this.key = keyValue;
              this.value = setValue;
          }
      
          public Request(RequestType type) {
              this(type, null);
          }
      
          public String getType() {
              return type;
          }
      
      
          public String getKey() {
              return key;
          }
      
          public String getValue() {
              return value;
          }
      
          @Override
          public String toString() {
              final StringBuilder sb = new StringBuilder("Request{");
              sb.append("type='").append(type).append('\'');
              sb.append(", key='").append(key).append('\'');
              sb.append(", value='").append(value).append('\'');
              sb.append('}');
              return sb.toString();
          }
      }
    learner_created: true
  - name: src/server/EntityService.java
    visible: true
    text: |
      package server;
      
      import java.util.List;
      
      import static server.ResponseType.ERROR;
      import static server.ResponseType.OK;
      
      public class EntityService {
          private final EntityDAO repository;
      
      
          public EntityService() {
              this.repository = new EntityDAO();
          }
      
      
      
          public synchronized void get(String key, Response response) {
              System.out.println("sosiska1");
              List<Entity> list = repository.findAll();
              System.out.println("sosika2");
              Entity entity = list.stream().filter(t -> t.getKey().equals(key)).findFirst().orElse(new Entity("", ""));
              System.out.println("sosiska3");
              if (isInvalid(entity)) {
                  response.setReason("No such key");
                  response.setResponse(ERROR);
              } else {
                  response.setValue(entity.getValue());
                  response.setResponse(OK);
              }
          }
      
          public synchronized void set(String key, String value, Response response) {
              List<Entity> list = repository.findAll();
      
              Entity entity = list.stream().filter(t -> t.getKey().equals(key)).findFirst().orElse(new Entity("", ""));
      
              if (isInvalid(entity)) {
                  list.add(new Entity(key, value));
              } else {
                  entity.setValue(value);
              }
      
              repository.saveAll(list);
      
              response.setResponse(OK);
      
          }
      
          public synchronized void delete(String key, Response response) {
              List<Entity> list = repository.findAll();
      
              Entity entity = list.stream().filter(t -> t.getKey().equals(key)).findFirst().orElse(new Entity("", ""));
      
              if (isInvalid(entity)) {
                  response.setReason("No such key");
                  response.setResponse(ERROR);
              } else {
                  list.remove(entity);
                  response.setResponse(OK);
              }
              repository.saveAll(list);
          }
      
          private boolean isInvalid(Entity entity) {
              return entity == null || entity.getKey().isBlank() && entity.getValue().isBlank();
          }
      }
    learner_created: true
  - name: src/server/Entity.java
    visible: true
    text: |
      package server;
      
      
      public class Entity {
      
      
          private String key;
      
      
          private String value;
      
      
          @Override
          public String toString() {
              return "Entity{" +
                      "key='" + key + '\'' +
                      ", value='" + value + '\'' +
                      '}';
          }
      
          public Entity(String key, String value) {
              this.key = key;
              this.value = value;
          }
      
      
          public String getKey() {
              return key;
          }
      
          public String getValue() {
              return value;
          }
      
          public void setKey(String key) {
              this.key = key;
          }
      
          public void setValue(String value) {
              this.value = value;
          }
      }
    learner_created: true
  - name: src/client/RequestType.java
    visible: true
    text: |
      package client;
      
      public enum RequestType {
          SET("set"),
          GET("get"),
          DELETE("delete"),
          IN("in"),
          EXIT("exit");
      
          private final String type;
      
          RequestType(String type) {
              this.type = type;
          }
      
          public String getType() {
              return type;
          }
      }
    learner_created: true
  - name: src/server/Response.java
    visible: true
    text: |
      package server;
      
      import java.io.Serializable;
      
      public class Response implements Serializable {
      
          private ResponseType response;
          private String reason;
          private String value;
      
          public void setValue(String value) {
              this.value = value;
          }
      
          public Response(ResponseType response, String reason) {
              this.response = response;
              this.reason = reason;
          }
      
          public Response(ResponseType response) {
              this.response = response;
          }
          public Response( ) {
      
          }
      
          public Response(ResponseType response, String reason, String value) {
              this.response = response;
              this.reason = reason;
              this.value = value;
          }
      
          public void setReason(String reason) {
              this.reason = reason;
          }
      
          public void setResponse(ResponseType response) {
              this.response = response;
          }
      }
    learner_created: true
  - name: src/client/Args.java
    visible: true
    text: |
      package client;
      
      import com.beust.jcommander.Parameter;
      
      public class Args {
          @Parameter(names = {"--requestType", "-t"})
          private String requestType;
          @Parameter(names = {"--index", "-k"})
          private String index;
          @Parameter(names = {"--value", "-v"})
          private String value;
          @Parameter(names = {"--file", "-in"})
          private String file;
      
          public String getFile() {
              return file;
          }
      
          public String getRequestType() {
              return requestType;
          }
      
          public String getIndex() {
              return index;
          }
      
          public String getValue() {
              return value;
          }
      
      
          public Args() {
      
          }
      }
    learner_created: true
  - name: src/client/data/testSet.json
    visible: true
    text: "{\"type\":\"set\",\"key\":\"name\",\"value\":\"Kate\"}"
    learner_created: true
  - name: src/client/data/testDelete.json
    visible: true
    text: "{\"type\":\"delete\",\"key\":\"name\"}"
    learner_created: true
  - name: src/server/data/db.json
    visible: true
    text: |-
      [
        {
          "key": "text",
          "value": "Some text here"
        }
      ]
    learner_created: true
  - name: src/server/EntityDAO.java
    visible: true
    text: "package server;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\n\
    \nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\
    import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\n\
    import java.util.List;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\
    \npublic class EntityDAO {\n    private static final String DB_URL = \"/Users\"\
    \ +\n            \"/mihail\" +\n            \"/IdeaProjects\" +\n            \"\
    /JSON Database with Java\" +\n            \"/JSON Database with Java\" +\n   \
    \         \"/task\" +\n            \"/src\" +\n            \"/server\" +\n   \
    \         \"/data\" +\n            \"/db.json\";;\n    private final Gson gson;\n\
    \    private final ReentrantReadWriteLock lock;\n\n    public EntityDAO() {\n\
    \        this.lock = new ReentrantReadWriteLock();\n        this.gson = new Gson().newBuilder().setPrettyPrinting().create();\n\
    \    }\n\n    public List<Entity> findAll() {\n        List<Entity> entities =\
    \ new ArrayList<>();\n\n        StringBuilder jsonString = new StringBuilder();\n\
    \        lock.readLock().lock();\n        try (BufferedReader reader = Files.newBufferedReader(Paths.get(DB_URL)))\
    \ {\n            String line;\n            while ((line = reader.readLine()) !=\
    \ null) {\n                jsonString.append(line);\n            }\n        }\
    \ catch (IOException e) {\n            e.printStackTrace();\n        }\n     \
    \   lock.readLock().unlock();\n\n        if (jsonString.isEmpty() || jsonString.length()\
    \ == 2) {\n            return entities;\n        }\n        entities = gson.fromJson(jsonString.toString(),\
    \ new TypeToken<List<Entity>>() {}.getType());\n\n        return entities;\n \
    \   }\n\n\n    public void saveAll(List<Entity> entities) {\n        lock.writeLock().lock();\n\
    \n        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(DB_URL)))\
    \ {\n\n            StringBuilder jsonString = new StringBuilder();\n         \
    \   jsonString.append(gson.toJson(entities, new TypeToken<List<Entity>>() {}.getType()));\n\
    \     \n            writer.write(jsonString.toString());\n\n        } catch (IOException\
    \ e) {\n            e.printStackTrace();\n        }\n        lock.writeLock().unlock();\n\
    \    }\n\n}\n"
    learner_created: true
  - name: src/server/data/data.json
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5495#comment
status: Failed
feedback:
  message: "Error in test #1\n\nIn this test, the program is running for a long time,\
    \ more than 15 seconds. Most likely, the program has gone into an infinite loop.\n\
    \nPlease find below the output of your program during this failed test.\n\n---\n\
    \nArguments for Main: -t exit\n\nstdout:\nServer started!\n\nstderr:\njava.net.ConnectException:\
    \ Connection refused\n\tat java.base/sun.nio.ch.Net.connect0(Native Method)\n\t\
    at java.base/sun.nio.ch.Net.connect(Net.java:579)\n\tat java.base/sun.nio.ch.Net.connect(Net.java:568)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:588)\n\tat\
    \ java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)\n\tat java.base/java.net.Socket.connect(Socket.java:633)\n\
    \tat java.base/java.net.Socket.connect(Socket.java:583)\n\tat java.base/java.net.Socket.&lt;init&gt;(Socket.java:507)\n\
    \tat java.base/java.net.Socket.&lt;init&gt;(Socket.java:319)\n\tat client.Main.main(Main.java:42)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)"
  time: "Sun, 19 May 2024 18:54:51 UTC"
record: -1
